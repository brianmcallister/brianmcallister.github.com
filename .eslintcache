[{"/Users/brianmcallister/Projects/www.brianmcallister.com/api/callback.ts":"1","/Users/brianmcallister/Projects/www.brianmcallister.com/api/login.ts":"2","/Users/brianmcallister/Projects/www.brianmcallister.com/api/me.ts":"3","/Users/brianmcallister/Projects/www.brianmcallister.com/api/services/spotify.ts":"4","/Users/brianmcallister/Projects/www.brianmcallister.com/api/services/user.ts":"5","/Users/brianmcallister/Projects/www.brianmcallister.com/api/types.d.ts":"6"},{"size":762,"mtime":1591405946939,"results":"7","hashOfConfig":"8"},{"size":323,"mtime":1591405392216,"results":"9","hashOfConfig":"8"},{"size":984,"mtime":1591406108179,"results":"10","hashOfConfig":"8"},{"size":3064,"mtime":1591454682438,"results":"11","hashOfConfig":"8"},{"size":1294,"mtime":1591405069658,"results":"12","hashOfConfig":"8"},{"size":864,"mtime":1591405083801,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"1oc64n9",{"filePath":"17","messages":"18","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":29,"warningCount":7,"fixableErrorCount":26,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/Users/brianmcallister/Projects/www.brianmcallister.com/api/callback.ts",["32"],"import * as user from './services/user';\nimport * as spotify from './services/spotify';\n\nimport { NowRequest, NowResponse } from '@vercel/node';\n\nexport default async (req: NowRequest, res: NowResponse) => {\n  const { code } = req.query;\n  const requestCode = Array.isArray(code) ? code[0] : code;\n  const { access_token, refresh_token } = await spotify.getAccessTokens(requestCode);\n\n  if (!access_token) {\n    console.log('no access token');\n    res.status(400).send('bad request');\n    return;\n  }\n\n  try {\n    await user.updateUser('freebowlofsoup', { access_token, refresh_token });\n\n    res.setHeader('location', 'http://localhost:3000/api/me');\n    res.status(302).send('');\n  } catch (err) {\n    console.log(err);\n\n    res.status(500).send('err');\n  }\n}\n","/Users/brianmcallister/Projects/www.brianmcallister.com/api/login.ts",["33"],"import { NowRequest, NowResponse } from '@vercel/node'\n\nimport * as spotify from './services/spotify';\n\nconst { PASSWORD } = process.env;\n\nexport default (req: NowRequest, res: NowResponse) => {\n  const { password } = req.query;\n\n  res.setHeader('location', spotify.getAuthUrl().toString());\n\n  res.status(302).send('');\n}\n","/Users/brianmcallister/Projects/www.brianmcallister.com/api/me.ts",["34"],"import { NowRequest, NowResponse } from '@vercel/node'\n\nimport * as spotify from './services/spotify';\nimport * as user from './services/user';\n\nexport default async (req: NowRequest, res: NowResponse) => {\n  try {\n    const result = await user.getUser();\n\n    if (!result) {\n      console.log('no result', result);\n      res.status(500).send('no user');\n      return;\n    }\n\n    spotify.setTokens(result.access_token, result.refresh_token);\n\n    const [current, me] = await Promise.all([\n      spotify.getCurrentlyPlaying(),\n      spotify.getMe()\n    ]);\n\n    if (current === null) {\n      res.status(200).json({});\n      return;\n    }\n\n    const details = {\n      artist: current.item.artists[0].name,\n      album: current.item.album.name,\n      image: current.item.album.images[0].url,\n      track: current.item.name,\n      profile: me.external_urls.spotify\n    };\n\n    res.status(200).json(details);\n  } catch (err) {\n    console.log(err);\n\n    res.status(500).send('err');\n  }\n}\n","/Users/brianmcallister/Projects/www.brianmcallister.com/api/services/spotify.ts",["35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70"],"import fetch from 'node-fetch';\nimport assert from 'assert';\n\nimport * as user from './user';\n\ninterface Tokens {\n  access_token: string | null;\n  refresh_token: string | null;\n}\n\nconst { SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET, REDIRECT_URI } = process.env;\nconst SCOPES = \"user-read-currently-playing user-read-playback-state\";\nconst SPOTIFY_ACCOUNTS_URL = \"https://accounts.spotify.com\";\nconst SPOTIFY_API_BASE_URL = \"https://api.spotify.com\";\nconst tokens: Tokens = {\n  access_token: null,\n  refresh_token: null\n};\n\nexport const setTokens = (\n  access_token: Tokens['access_token'],\n  refresh_token: Tokens['refresh_token'],\n) => {\n  if (access_token) {\n    tokens.access_token = access_token;\n  }\n\n  if (refresh_token) {\n    tokens.refresh_token = refresh_token;\n  }\n};\n\nconst makeRequest = async (apiUrl: string): Promise<any> => {\n  const url = new URL(`v1/${apiUrl}`, SPOTIFY_API_BASE_URL);\n  const req = await fetch(url, {\n    headers: {\n      authorization: `Bearer ${tokens.access_token}`\n    }\n  });\n\n  // Spotify will send back 204 if a response is\n  // \"empty\" (i.e. you ask for the currently playing track\n  // but nothing is playing)\n  if (req.status === 204) {\n    return null;\n  }\n\n  const json = await req.json();\n\n  if (!req.ok && req.status === 401 && json.error.message === 'The access token expired') {\n    const { access_token } = await refreshAccessToken();\n\n    module.exports.setTokens(access_token);\n    user.updateUser('freebowlofsoup', { access_token, refresh_token: tokens.refresh_token });\n\n    return makeRequest(apiUrl);\n  }\n\n  return json;\n};\n\nexport const getCurrentlyPlaying = async () =>\n  makeRequest(\"me/player/currently-playing\");\n\nexport const getMe = async () => makeRequest(\"me\");\n\nexport const getAuthUrl = () => {\n  assert(REDIRECT_URI);\n\n  const url = new URL(\"authorize\", SPOTIFY_ACCOUNTS_URL);\n\n  url.search = (new URLSearchParams({\n    response_type: \"code\",\n    client_id: SPOTIFY_CLIENT_ID,\n    scope: SCOPES,\n    redirect_uri: REDIRECT_URI\n  })).toString();\n\n  return url;\n};\n\nexport const getAccessTokens = async (code: string) => {\n  assert(SPOTIFY_CLIENT_ID);\n  assert(SPOTIFY_CLIENT_SECRET);\n  assert(REDIRECT_URI);\n\n  const tokenUrl = new URL(\"api/token\", SPOTIFY_ACCOUNTS_URL);\n  const req = await fetch(tokenUrl, {\n    method: \"POST\",\n    body: new URLSearchParams({\n      grant_type: \"authorization_code\",\n      code,\n      redirect_uri: REDIRECT_URI,\n      client_id: SPOTIFY_CLIENT_ID,\n      client_secret: SPOTIFY_CLIENT_SECRET\n    })\n  });\n\n  return req.json();\n};\n\nexport const refreshAccessToken = async () => {\n  assert(tokens.refresh_token);\n\n  const tokenUrl = new URL(\"api/token\", SPOTIFY_ACCOUNTS_URL);\n  const client = Buffer.from(`${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}`);\n  const authorization = `Basic ${client.toString(\"base64\")}`;\n  const req = await fetch(tokenUrl, {\n    method: \"POST\",\n    headers: {\n      authorization\n    },\n    body: new URLSearchParams({\n      grant_type: \"refresh_token\",\n      refresh_token: tokens.refresh_token\n    })\n  });\n\n  return req.json();\n};\n","/Users/brianmcallister/Projects/www.brianmcallister.com/api/services/user.ts",["71"],"import assert from 'assert';\nimport { createPool, sql } from 'slonik';\nimport { access } from 'fs';\n\ninterface User {\n  id: string;\n  access_token: string | null;\n  refresh_token: string | null;\n}\n\nconst { POSTGRES_CONNECTION_STRING } = process.env;\n\nassert(POSTGRES_CONNECTION_STRING);\n\nexport const getUser = async (user = 'freebowlofsoup') => {\n  const pool = createPool(POSTGRES_CONNECTION_STRING);\n\n  const result = await pool.maybeOne<User>(sql`\n    SELECT *\n    FROM users\n    WHERE id = ${user}\n  `);\n\n  await pool.end();\n\n  return result;\n};\n\nexport const updateUser = async (id: string, rawParams: { access_token: string; refresh_token: string | null }) => {\n  const pool = createPool(POSTGRES_CONNECTION_STRING);\n  const { access_token, refresh_token } = rawParams;\n  const fields = [\n    { key: 'access_token', value: access_token },\n    { key: 'refresh_token', value: refresh_token },\n  ];\n  const setFields = fields.reduce<ReturnType<typeof sql.join>[]>((acc, next) => {\n    if (next.value != null) {\n      return [\n        ...acc,\n        sql.join([sql.identifier([next.key]), next.value], sql` = `),\n      ];\n    }\n\n    return acc;\n  }, []);\n  const query = sql`\n    UPDATE users\n    SET ${sql.join(setFields, sql`, `)}\n    WHERE id = ${id}\n  `;\n\n  return pool.query(query);\n};\n","/Users/brianmcallister/Projects/www.brianmcallister.com/api/types.d.ts",["72"],"import HttpStatusCodes from 'http-status-codes';\n\ntype StatusCodes = Extract<typeof HttpStatusCodes[keyof typeof HttpStatusCodes], number>;\n\ninterface NetlifyCallbackOptions {\n  statusCode: StatusCodes;\n  isBase64Encoded?: boolean;\n  headers?: { [key: string]: string };\n  body?: string;\n}\n\ntype NetlifyCallback = (error: Error | null, callback: NetlifyCallbackOptions) => void;\n\ntype HttpVerb = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'OPTIONS';\n\ninterface NetlifyEvent {\n  path: string;\n  httpMethod: HttpVerb;\n  headers: { [key: string]: string };\n  queryStringParameters: { [key: string]: string };\n  body: string;\n  isBase64Encoded: boolean;\n}\n\ninterface NetlifyContext {\n  clientContext: {\n    identity: any;\n    user: any;\n  };\n}\n\nexport type NetlifyHandler = (\n  event: NetlifyEvent,\n  context: NetlifyContext,\n  callback: NetlifyCallback,\n) => void;\n",{"ruleId":null,"fatal":true,"severity":2,"message":"73"},{"ruleId":null,"fatal":true,"severity":2,"message":"74"},{"ruleId":null,"fatal":true,"severity":2,"message":"75"},{"ruleId":"76","severity":2,"message":"77","line":1,"column":1,"nodeType":"78","endLine":1,"endColumn":32},{"ruleId":"79","severity":2,"message":"80","line":12,"column":16,"nodeType":null,"endLine":12,"endColumn":70,"fix":"81"},{"ruleId":"79","severity":2,"message":"82","line":13,"column":30,"nodeType":null,"endLine":13,"endColumn":60,"fix":"83"},{"ruleId":"79","severity":2,"message":"84","line":14,"column":30,"nodeType":null,"endLine":14,"endColumn":55,"fix":"85"},{"ruleId":"79","severity":2,"message":"86","line":17,"column":22,"nodeType":null,"endLine":17,"endColumn":22,"fix":"87"},{"ruleId":"88","severity":1,"message":"89","line":20,"column":26,"nodeType":"90","messageId":"91","endLine":23,"endColumn":5},{"ruleId":"79","severity":2,"message":"92","line":20,"column":27,"nodeType":null,"endLine":23,"endColumn":1,"fix":"93"},{"ruleId":"94","severity":1,"message":"95","line":33,"column":53,"nodeType":"96","messageId":"97","endLine":33,"endColumn":56,"suggestions":"98"},{"ruleId":"79","severity":2,"message":"86","line":37,"column":53,"nodeType":null,"endLine":37,"endColumn":53,"fix":"99"},{"ruleId":"79","severity":2,"message":"86","line":38,"column":6,"nodeType":null,"endLine":38,"endColumn":6,"fix":"100"},{"ruleId":"101","severity":2,"message":"102","line":51,"column":13,"nodeType":"103","messageId":"104","endLine":51,"endColumn":25},{"ruleId":"105","severity":2,"message":"106","line":51,"column":36,"nodeType":"103","messageId":"107","endLine":51,"endColumn":54},{"ruleId":"88","severity":1,"message":"89","line":62,"column":36,"nodeType":"90","messageId":"91","endLine":62,"endColumn":47},{"ruleId":"79","severity":2,"message":"108","line":62,"column":47,"nodeType":null,"endLine":63,"endColumn":44,"fix":"109"},{"ruleId":"88","severity":1,"message":"89","line":65,"column":22,"nodeType":"90","messageId":"91","endLine":65,"endColumn":33},{"ruleId":"79","severity":2,"message":"110","line":65,"column":46,"nodeType":null,"endLine":65,"endColumn":50,"fix":"111"},{"ruleId":"88","severity":1,"message":"89","line":67,"column":27,"nodeType":"90","messageId":"91","endLine":67,"endColumn":32},{"ruleId":"79","severity":2,"message":"112","line":70,"column":23,"nodeType":null,"endLine":70,"endColumn":34,"fix":"113"},{"ruleId":"79","severity":2,"message":"114","line":72,"column":16,"nodeType":null,"endLine":72,"endColumn":17,"fix":"115"},{"ruleId":"79","severity":2,"message":"116","line":73,"column":20,"nodeType":null,"endLine":73,"endColumn":26,"fix":"117"},{"ruleId":"79","severity":2,"message":"86","line":76,"column":31,"nodeType":null,"endLine":76,"endColumn":31,"fix":"118"},{"ruleId":"79","severity":2,"message":"119","line":77,"column":4,"nodeType":null,"endLine":77,"endColumn":5,"fix":"120"},{"ruleId":"88","severity":1,"message":"89","line":82,"column":32,"nodeType":"90","messageId":"91","endLine":82,"endColumn":55},{"ruleId":"79","severity":2,"message":"121","line":87,"column":28,"nodeType":null,"endLine":87,"endColumn":39,"fix":"122"},{"ruleId":"79","severity":2,"message":"123","line":89,"column":13,"nodeType":null,"endLine":89,"endColumn":19,"fix":"124"},{"ruleId":"79","severity":2,"message":"125","line":91,"column":19,"nodeType":null,"endLine":91,"endColumn":39,"fix":"126"},{"ruleId":"79","severity":2,"message":"86","line":95,"column":43,"nodeType":null,"endLine":95,"endColumn":43,"fix":"127"},{"ruleId":"79","severity":2,"message":"86","line":96,"column":7,"nodeType":null,"endLine":96,"endColumn":7,"fix":"128"},{"ruleId":"88","severity":1,"message":"89","line":102,"column":35,"nodeType":"90","messageId":"91","endLine":102,"endColumn":46},{"ruleId":"79","severity":2,"message":"121","line":105,"column":28,"nodeType":null,"endLine":105,"endColumn":39,"fix":"129"},{"ruleId":"79","severity":2,"message":"130","line":107,"column":50,"nodeType":null,"endLine":107,"endColumn":58,"fix":"131"},{"ruleId":"79","severity":2,"message":"123","line":109,"column":13,"nodeType":null,"endLine":109,"endColumn":19,"fix":"132"},{"ruleId":"79","severity":2,"message":"86","line":111,"column":20,"nodeType":null,"endLine":111,"endColumn":20,"fix":"133"},{"ruleId":"79","severity":2,"message":"134","line":114,"column":19,"nodeType":null,"endLine":114,"endColumn":34,"fix":"135"},{"ruleId":"79","severity":2,"message":"86","line":115,"column":42,"nodeType":null,"endLine":115,"endColumn":42,"fix":"136"},{"ruleId":"79","severity":2,"message":"86","line":116,"column":7,"nodeType":null,"endLine":116,"endColumn":7,"fix":"137"},{"ruleId":null,"fatal":true,"severity":2,"message":"138"},{"ruleId":null,"fatal":true,"severity":2,"message":"139"},"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: api/callback.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: api/login.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: api/me.ts.\nThe file must be included in at least one of the projects provided.","import/no-extraneous-dependencies","'node-fetch' should be listed in the project's dependencies, not devDependencies.","ImportDeclaration","prettier/prettier","Replace `\"user-read-currently-playing·user-read-playback-state\"` with `'user-read-currently-playing·user-read-playback-state'`",{"range":"140","text":"141"},"Replace `\"https://accounts.spotify.com\"` with `'https://accounts.spotify.com'`",{"range":"142","text":"143"},"Replace `\"https://api.spotify.com\"` with `'https://api.spotify.com'`",{"range":"144","text":"145"},"Insert `,`",{"range":"146","text":"147"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Replace `⏎··access_token:·Tokens['access_token'],⏎··refresh_token:·Tokens['refresh_token'],⏎` with `access_token:·Tokens['access_token'],·refresh_token:·Tokens['refresh_token']`",{"range":"148","text":"149"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["150","151"],{"range":"152","text":"147"},{"range":"153","text":"147"},"@typescript-eslint/naming-convention","Variable name access_token must match one of the following formats: camelCase, PascalCase, UPPER_CASE","Identifier","doesNotMatchFormat","@typescript-eslint/no-use-before-define","'refreshAccessToken' was used before it was defined.","noUseBeforeDefine","Replace `⏎··makeRequest(\"me/player/currently-playing\"` with `·makeRequest('me/player/currently-playing'`",{"range":"154","text":"155"},"Replace `\"me\"` with `'me'`",{"range":"156","text":"157"},"Replace `\"authorize\"` with `'authorize'`",{"range":"158","text":"159"},"Delete `(`",{"range":"160","text":"161"},"Replace `\"code\"` with `'code'`",{"range":"162","text":"163"},{"range":"164","text":"147"},"Delete `)`",{"range":"165","text":"161"},"Replace `\"api/token\"` with `'api/token'`",{"range":"166","text":"167"},"Replace `\"POST\"` with `'POST'`",{"range":"168","text":"169"},"Replace `\"authorization_code\"` with `'authorization_code'`",{"range":"170","text":"171"},{"range":"172","text":"147"},{"range":"173","text":"147"},{"range":"174","text":"167"},"Replace `\"base64\"` with `'base64'`",{"range":"175","text":"176"},{"range":"177","text":"169"},{"range":"178","text":"147"},"Replace `\"refresh_token\"` with `'refresh_token'`",{"range":"179","text":"180"},{"range":"181","text":"147"},{"range":"182","text":"147"},"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: api/services/user.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: api/types.d.ts.\nThe file must be included in at least one of the projects provided.",[275,329],"'user-read-currently-playing user-read-playback-state'",[360,390],"'https://accounts.spotify.com'",[421,446],"'https://api.spotify.com'",[516,516],",",[547,630],"access_token: Tokens['access_token'], refresh_token: Tokens['refresh_token']",{"messageId":"183","fix":"184","desc":"185"},{"messageId":"186","fix":"187","desc":"188"},[1000,1000],[1006,1006],[1626,1670]," makeRequest('me/player/currently-playing'",[1719,1723],"'me'",[1808,1819],"'authorize'",[1860,1861],"",[1902,1908],"'code'",[1993,1993],[1997,1998],[2202,2213],"'api/token'",[2288,2294],"'POST'",[2346,2366],"'authorization_code'",[2492,2492],[2499,2499],[2640,2651],[2804,2812],"'base64'",[2867,2873],[2909,2909],[2967,2982],"'refresh_token'",[3025,3025],[3032,3032],"suggestUnknown",{"range":"189","text":"190"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"189","text":"191"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[829,832],"unknown","never"]